#include <iostream>
#include <map>
#include <string>
#include<list>
#include<iterator>// for std::next
#include <cstdlib>//for randomness
#include<ctime>//for randomness


char inttoletter(int i)
{
	std::string s("abcdefghijklmnopqrstuvwxyz");
	// std::cout<<s.size()<<'\n';
	return s.at(i % s.size());
}
//fill a dictionnary with appearances of letters
void letterinlistofword(std::list<std::string> l, std::map<char, std::map<char, double> >& dict)
{
	std::list<std::string>::iterator it;
	for (it = l.begin(); it != l.end(); ++it) {
		//std::cout<<(*it)<<'\n';
		std::string::iterator itt;
		//goes through all the letters in each word
		for (itt = (*it).begin(); itt != (*it).end() - 1; ++itt) {
			// std::cout<<(*itt)<<'\n';
			// std::cout<<*(std::next(itt,1))<<'\n';
			dict[(*itt)][*(std::next(itt, 1))] += 1.0;
		}
	}
}

//modifies a dictionnary with conditionnal probabilities
void freqtable(std::map<char, std::map<char, double> >& dict)
{
	for (int i = 0; i <= 25;i++) {
		double weight = 0;
		for (int j = 0;j <= 25;j++) {
			weight += dict[inttoletter(i)][inttoletter(j)];
		}
		// replace all the integers into frequences
		for (int j = 0;j <= 25;j++) {
			int temp;
			temp = dict[inttoletter(i)][inttoletter(j)];
			dict[inttoletter(i)][inttoletter(j)] = temp / weight;
			//std::cout<<dict[inttoletter(i)][inttoletter(j)]<<'\n';
		}

		//std::cout<<weight<<'\n';
	}
}
std::string pokemonnames(int nbletters, std::map<char, std::map<char, double> > dict) {

	std::string name(nbletters, 'X');

	std::srand(std::time(0));//takes a time to randomize the numbers generated by rand
	char firstletter = inttoletter(std::rand() % 25);
	name[0] = firstletter;
	std::srand(std::time(0));
	double proba = (std::rand() % 100) / (100.00);
	double somme = 0;
	char previousletter = firstletter;
	char nextletter;
	int i;
	for (int j = 1;j < nbletters;j++) {

		proba = (std::rand() % 100) / (100.00);


		i = 0;
		somme = 0;
		somme = dict[previousletter][inttoletter(i)];

		while (proba > somme) {
			i += 1;
			somme += dict[previousletter][inttoletter(i)];

		}
		nextletter = inttoletter(i);

		name[j] = nextletter;
		previousletter = nextletter;

	}

	return name;
}

int main()
{

	//creates the dictionnary of letter to number
	std::map<char, std::map<char, double> > letternb;
	std::map<char, double>  letterdic;
	//   std::map<char,int>::iterator it;

	//initialize the dictionnary to 0 for all letters
	for (int i = 0; i <= 25; i++) {
		letterdic[inttoletter(i)] = 0;
		for (int i = 0; i <= 25; i++) {
			letternb[inttoletter(i)] = letterdic;
		}
	}

	//creates the list of strings

	std::list<std::string> l;
	l.push_back("pikachu");
	l.push_back("growlithe");
	l.push_back("golem");
	l.push_back("farfetch");
	l.push_back("electabuzz");
	l.push_back("exeggutor");
	l.push_back("doduo");
	l.push_back("alakazam");
	l.push_back("aerodactyl");
	l.push_back("abra");
	l.push_back("blastoise");
	l.push_back("bulbasaur");
	l.push_back("charizard");
	l.push_back("charmeleon");
	l.push_back("clefairy");
	l.push_back("cloyster");
	l.push_back("dodrio");
	l.push_back("dragonite");
	l.push_back("vaporeon");
	l.push_back("venusaur");
	l.push_back("tentacruel");
	l.push_back("tangela");
	l.push_back("squirtle");
	l.push_back("raichu");
	l.push_back("rattata");
	l.push_back("psyduck");
	l.push_back("porygon");
	l.push_back("wartortle");
	l.push_back("zapdos");
	l.push_back("zubat");
	l.push_back("magneton");
	l.push_back("magikarp");
	l.push_back("fearow");
	l.push_back("arcanine");
	l.push_back("onix");
	l.push_back("hitmonlee");
	l.push_back("Pidgey");
	l.push_back("Raticate");

	l.push_back("haunter");

	l.push_back("vulpix");

	l.push_back("jigglypuff");
	l.push_back("Spearow");
	l.push_back("Sandshrew");
	l.push_back("Vulpix");
	l.push_back("Ninetales");
	l.push_back("Zubat");
	l.push_back("Vileplume");
	l.push_back("Meowth");


	letterinlistofword(l, letternb);

	freqtable(letternb);


	std::srand(std::time(0));
	std::cout << pokemonnames(rand() % 5 + 5, letternb) << '\n';

	return 0;
}
