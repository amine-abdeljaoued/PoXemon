//program that initialize a dictionnary from the alphabet to their apparition numbers
#include <iostream>
#include <map>
#include <string>
#include<list>
#include<iterator>// for std::next
#include <cstdlib>//for randomness
#include<ctime>//for randomness


char inttoletter(int i)
{
    std::string s("abcdefghijklmnopqrstuvwxyz");
    // std::cout<<s.size()<<'\n';
    return s.at( i % s.size() );
}
//fill a dictionnary with appearances of letters
void letterinlistofword(std::list<std::string> l, std::map<char,std::map<char,double> >& dict)
{
    std::list<std::string>::iterator it;
    for(it = l.begin(); it != l.end(); ++it){
        //std::cout<<(*it)<<'\n';
        std::string::iterator itt;
        //goes through all the letters in each word
        for(itt = (*it).begin(); itt != (*it).end()-1; ++itt){
            // std::cout<<(*itt)<<'\n';
            // std::cout<<*(std::next(itt,1))<<'\n';
            dict[(*itt)][*(std::next(itt,1))]+=1.0;  
        }
    }
}

//modifies a dictionnary with conditionnal probabilities
void freqtable(std::map<char,std::map<char,double> >& dict)
{
    for (int i =0; i<=25;i++){
        double weight=0;
        for (int j=0;j<=25;j++){
            weight+=dict[inttoletter(i)][inttoletter(j)];
        }
        // replace all the integers into frequences
        for (int j=0;j<=25;j++){
            int temp;
            temp=dict[inttoletter(i)][inttoletter(j)];
            dict[inttoletter(i)][inttoletter(j)]=temp/weight;
            //std::cout<<dict[inttoletter(i)][inttoletter(j)]<<'\n';
        }

        //std::cout<<weight<<'\n';
    }
}
std::string pokemonnames(int nbletters,std::map<char,std::map<char,double> > dict){

    std::string name(nbletters,'X');

    std::srand(std::time(0));//takes a time to randomize the numbers generated by rand
    char firstletter= inttoletter(std::rand()%25);
    name[0]=firstletter;
    std::srand(std::time(0));
    double proba = (std::rand()%100)/(100.00);
    double somme = 0;
    char previousletter = firstletter;
    char nextletter;
    int i;
    for (int j = 1;j<nbletters;j++){

        proba = (std::rand()%100)/(100.00);
        std::cout<<"proba= "<<proba<<'\n';
        
        i=0;
        somme = 0;
        somme = dict[previousletter][inttoletter(i)];
        std::cout<<"somme= "<<somme<<'\n';
        while (proba>somme){
            i+=1;
            somme += dict[previousletter][inttoletter(i)];
            std::cout<<"somme= "<<somme<<'\n';
            std::cout<<"i= "<<i<<'\n';
        }
        nextletter=inttoletter(i);
        std::cout<<nextletter<<'\n';
        name[j]=nextletter;
        previousletter=nextletter;

    }

    return name;
}

int main ()
{
//creates the dictionnary of letter to number
    std::map<char,std::map<char,double> > letternb ;
    std::map<char,double>  letterdic ;
    //   std::map<char,int>::iterator it;

    //initialize the dictionnary to 0 for all letters
    for (int i = 0; i<=25 ; i++){
        letterdic[inttoletter(i)] = 0;
        for (int i = 0; i<=25 ; i++){
        letternb[inttoletter(i)] = letterdic;
        }
    }

//creates the list of strings
    std::cout << "elements in list of string:" << '\n';
    std::list<std::string> l;
    l.push_back("pikachu");
        std::cout << "pikachu" << '\n';
    l.push_back("growlithe");
        std::cout << "growlithe" << '\n';
    l.push_back("golem");
        std::cout << "golem" << '\n';
    l.push_back("farfetch");
        std::cout << "farfetch" << '\n';
    l.push_back("electabuzz");
        std::cout << "electabuzz" << '\n';
    l.push_back("exeggutor");
        std::cout << "exeggutor" << '\n';
    l.push_back("doduo");
        std::cout << "doduo" << '\n';
    l.push_back("alakazam");
        std::cout << "alakazam" << '\n';
    l.push_back("aerodactyl");
        std::cout << "aerodactyl" << '\n';
    l.push_back("abra");
        std::cout << "abra" << '\n';
    l.push_back("blastoise");
        std::cout << "blastoise" << '\n';
    l.push_back("bulbasaur");
        std::cout << "bulbasaur" << '\n';
    l.push_back("charizard");
        std::cout << "charizard" << '\n';
    l.push_back("charmeleon");
        std::cout << "charmeleon" << '\n';
    l.push_back("clefairy");
        std::cout << "clefairy" << '\n';
    l.push_back("cloyster");
        std::cout << "cloyster" << '\n';
    l.push_back("dodrio");
        std::cout << "dodrio" << '\n';
    l.push_back("dragonite");
        std::cout << "dragonite" << '\n';
    l.push_back("vaporeon");
        std::cout << "vaporeon" << '\n';
    l.push_back("venusaur");
        std::cout << "venusaur" << '\n';
    l.push_back("tentacruel");
        std::cout << "tentacruel" << '\n';
    l.push_back("tangela");
        std::cout << "tangela" << '\n';
    l.push_back("squirtle");
        std::cout << "squirtle" << '\n';
    l.push_back("raichu");
        std::cout << "raichu" << '\n';
    l.push_back("rattata");
        std::cout << "rattata" << '\n';
    l.push_back("psyduck");
        std::cout << "psyduck" << '\n';
    l.push_back("porygon");
        std::cout << "porygon" << '\n';
    l.push_back("wartortle");
        std::cout << "wartortle" << '\n';
    l.push_back("zapdos");
        std::cout << "zapdos" << '\n';
    l.push_back("zubat");
        std::cout << "zubat" << '\n';
    l.push_back("magneton");
        std::cout << "magneton" << '\n';
    l.push_back("magikarp");
        std::cout << "magikarp" << '\n';
    l.push_back("fearow");
        std::cout << "fearow" << '\n';
    l.push_back("arcanine");
        std::cout << "arcanine" << '\n';
    l.push_back("onix");
        std::cout << "onix" << '\n';
    l.push_back("hitmonlee");
        std::cout << "hitmonlee" << '\n';
    l.push_back("hitmonlee");
        std::cout << "hitmonlee" << '\n';
    l.push_back("hitmonlee");
        std::cout << "hitmonchan" << '\n';
    l.push_back("haunter");
        std::cout << "haunter" << '\n';
    l.push_back("vulpix");
        std::cout << "vulpix" << '\n';
    l.push_back("jigglypuff");
        std::cout << "jigglypuff" << '\n';

    letterinlistofword(l,letternb);

    std::cout << "elements in letterdic:" << '\n';

    //way to access to the nested dictionnary elements
    // for (int i = 0; i<=25 ; i++){
    //     std::cout<<inttoletter(i)<<'\n';
    //     for(int j =0; j<=25 ; j++){
    //     std::cout<<(letternb.find(inttoletter(j))->second).find(inttoletter(i))->second<<'\n';
    //     }
    // }
    freqtable(letternb);
    std::cout<<"probability of having an ? after an A"<<'\n';
    std::cout<<letternb['a']['a']<<'\n';
    for (int i=0;i<=25;i++){
        std::cout<<(letternb.find('a')->second).find(inttoletter(i))->second<<'\n';
    }
    std::srand(std::time(0));
    std::cout<<pokemonnames(rand()%5 + 5,letternb)<<'\n';

  return 0;
}



